   ///** ---- fetch session data from gateway url, check validity and throw data ---- **///
    static async fetch(init_session_fetch_request_data: __init_session_fetch_request_data) {
        console.log("fetch")
        try{
            const merchant = await Pool.X.merchant.findUnique({where: {uid: init_session_fetch_request_data.merchant_uid} })
            if (merchant){
                const session = await Pool.X.session.findUnique({where: {uid: init_session_fetch_request_data.session_uid} })
                if (session){
                    ///** ---- session successfully created ---- **///
                    Console.log('cyan', '[+] Session fetched, '+"suid: "+session.uid)
                    return {"status_code": 200, data: {
                                    "domain": merchant.domain,
                                    "merchant_uid": merchant.uid,
                                    "status": session.status,
                                    "currency" : session.currency,
                                    "paid": session.paid,
                                    "amount": session.amount,
                                    "created_at": session.created_at,
                                    "stage": session.stage
                                }
                            }
                } else{
                    ///** ---- session not found  ---- **///
                    Console.log('yellow', '[!] Session not found')
                    return {"status_code": 400, "message": "[!] Session not found"}
                }
            } else {
                ///** ---- merchant not found  ---- **///
                Console.log('yellow', '[!] Merchant not found')
                return {"status_code": 400, "message": "[!] Merchant not found"}
            }
        } catch (e){
            ///** ---- some unexpexted error  ---- **///
            Console.log('yellow','[!] Some unexpected error: '+e.toString())
            return {"status_code": 500, "message": 'Some unexpected error: '+e.toString()}
        }
    }



    .get('/', ({query: init_session_fetch_request_data}: {query: __init_session_fetch_request_data}) => SessionController.fetch(init_session_fetch_request_data))